package zork;import java.awt.*;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling * Version: 1.1 * Date:    March 2000 *  *  This class is the main class of the "Zork" application. Zork is a very *  simple, text based adventure game.  Users can walk around some scenery. *  That's all. It should really be extended to make it more interesting! *  *  To play this game, create an instance of this class and call the "play" *  routine. *  *  This main class creates and initialises all the others: it creates all *  rooms, creates the parser and starts the game.  It also evaluates the *  commands that the parser returns. */public class Game {		private Parser parser;	private Room currentRoom;	private Room level1, level2, level3, level3_1,level3_2,level4,level5;	/**	 * Create the game and initialise its internal map.	 */	public Game() {		parser = new Parser();				// Create all the rooms and link their exits together.		level1 = new Room("Level 1", "Level 1:" + System.lineSeparator() + "Wie lautet die näschste Zahl in dieser Zahlenreihe?" + System.lineSeparator() + "2 - 3 - 5 - 7 - 11 - 13 - ?" + System.lineSeparator() + "north: 15, south: 14, east: 17, west 16");		level2 = new Room("Level 2", "Level 2:" + System.lineSeparator() + "Rechnen Sie die Rechnung korrekt aus." + System.lineSeparator() + "Ein Fünftel von 65 + 25 * 5 * 6 =" + System.lineSeparator() + "north: 161, south: 165, east: 160, west: 163");		level3 = new Room("Level 3", "Level 3:" + System.lineSeparator() + "Wie lautet die gesuchte Zahl?" + System.lineSeparator() + "Doppelt so viel + die Hälfte + ein viertel + 1 = 100" + System.lineSeparator() + "north: 39, south: 33, east: 31, west 36");		level3_1 = new Room("Level 3_1", "Level 3_1:" + System.lineSeparator() + "Lösen Sie diese Gleichung nach x auf." + System.lineSeparator() + "-x - 3 = -10" + System.lineSeparator() + "north: 8, south: 17, east: 70, west: eine andere Zahl");		level3_2 = new Room("Level 3_2", "Level 3_2:" + System.lineSeparator() + "Mit der korrekten Antwort gelangen Sie zu Level 4." + System.lineSeparator() + "Wie berechnet man den Flächeninhalt eines Dreiecks?" + System.lineSeparator() + "north: a*b:2, south: a:d:2, east: a:b*2, west: a+b*2");		level4 = new Room("Level 4", "Level 4:" + System.lineSeparator() + "Beantworten Sie diese Frage Korrekt." + System.lineSeparator() + "Welches dieser Lagemasse ist nicht robust?" + System.lineSeparator() + "north: Arithmetisches Mittel, south: Modus, east: Median, west: Alle sind robust");		level5 = new Room("Level 5", "Level 5:" + System.lineSeparator() + "Herzlichen Glückwunsch! Sie haben das Rätsel erfolgreich erledigt.");		//Create all Back rooms		level1.setBackRoom(level1);		level2.setBackRoom(level1);		level3.setBackRoom(level2);		level3_1.setBackRoom(level3);		level3_2.setBackRoom(level3_1);		level4.setBackRoom(level3);		level5.setBackRoom(level4);		// initialise room exits		level1.setExits(null,level2,null,null);		level2.setExits(null, null, null, level3);		level3.setExits(level3_1, level3_1, level3_1, level4);		level3_1.setExits(null, null, null, level3_1);		level3_2.setExits(level4, null, null, null);		level4.setExits(level5, null, null, null);		currentRoom = level1; // start game outside	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	/**	 * Print out the opening message for the player.	 */	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Levelup!");		System.out.println("Levelup is programmed by Milos and Vilax");		System.out.println("These are the commands you can use:");		System.out.println("go south/north/east/west, back, help, map");		System.out.println(currentRoom.shortDescription());	}	/**	 * Given a command, process (that is: execute) the command.	 * If this command ends the game, true is returned, otherwise false is	 * returned.	 */	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);		} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		else if (commandWord.equals("back")){			currentRoom = currentRoom.getBackRoom();			System.out.println(currentRoom.shortDescription());		}		else if(commandWord.equals("map")){			String map = mapRoom(level1) + System.lineSeparator();			map += mapRoom(level2) + System.lineSeparator();			map += mapRoom(level3) + System.lineSeparator();			map += mapRoom(level3_1) + System.lineSeparator();			map += mapRoom(level3_2) + System.lineSeparator();			map += mapRoom(level4) + System.lineSeparator();			map += mapRoom(level5) + System.lineSeparator();			System.out.println(map);		}		return false;	}	private String mapRoom(Room room){		String out = "";		String name = room.getName();		out += "|---";		for (int i = 0; i < name.length(); i++){			out += "-";		}		out += "---|" + System.lineSeparator();		if (room.equals(currentRoom)){			out += "|***" + name + "***|" + System.lineSeparator();		}		else{			out += "|   " + name + "   |" + System.lineSeparator();		}		out += "|---";		for (int i = 0; i < name.length(); i++){			out += "-";		}		out += "---|";		return out;	}	/*	 * implementations of user commands:	 */ 	/**	 * Print out some help information.	 * Here we print some stupid, cryptic message and a list of the 	 * command words.	 */	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	/** 	 * Try to go to one direction. If there is an exit, enter the new	 * room, otherwise print an error message.	 */	private void goRoom(Command command) {		// if there is no second word, we don't know where to go...		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.shortDescription());			}		}	}}